---
import Layout from '../layouts/Layout.astro';

let properties = [];
let hasSearched = false;
let isLoading = false;
let locationInputValue = ''; // Ensure this is globally accessible

async function fetchProperties(location) {
  isLoading = true;
  properties = [];
  hasSearched = true;
  return properties;
}
---

<Layout>
  <section class="py-8 px-4 flex justify-center">
    <div id="search-container" class="bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 p-6 rounded-lg shadow-md w-full max-w-3xl text-center transition-opacity duration-500">
      <h1 class="text-3xl font-bold mb-4">Find Your Dream Property</h1>
      <p class="text-lg text-gray-700 dark:text-gray-300 mb-4">Search from a variety of properties available across different locations. Enter a location below to get started.</p>
      
      <form id="search-form" class="search-form flex justify-center gap-4 mb-1">
        <input 
          type="text" 
          id="location-input" 
          placeholder="Enter location" 
          required 
          class="px-4 py-2 border rounded w-full bg-gray-200 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-gray-100" 
        />
        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Search</button>
      </form>

      <p class="text-sm text-gray-500 dark:text-gray-400 mt-3">...or try a map search</p>
    </div>

    <div id="loading" class="hidden flex flex-col items-center justify-center text-center mt-8 transition-all duration-500">
      <i class="fas fa-spinner fa-spin text-4xl text-blue-500"></i>
      <p class="mt-4 text-xl transition-opacity duration-500" id="loading-text"></p>
      <div id="action-buttons" class="mt-4 flex justify-center gap-4">
        <button id="rent-button" class="bg-green-500 text-white px-4 py-2 rounded">Rent</button>
        <button id="buy-button" class="bg-blue-600 text-white px-4 py-2 rounded">Buy</button>
      </div>
    </div>
  </section>

  <script>
    // Ensure locationInputValue is correctly assigned
    let locationInputValue = ''; // Declare it here for global access

    document.getElementById('search-form').addEventListener('submit', async (event) => {
      event.preventDefault();
      locationInputValue = document.getElementById('location-input').value; // Assign the value

      const searchContainer = document.getElementById('search-container');
      const loadingDiv = document.getElementById('loading');

      // Start the fade-out transition
      searchContainer.classList.add('opacity-0');

      // Wait for the transition to complete before removing the container and showing the loading screen
      setTimeout(() => {
        searchContainer.remove();
        loadingDiv.classList.remove('hidden');
        document.getElementById('loading-text').textContent = `You are looking for a property in ${locationInputValue}. Would you like to rent or buy?`;
      }, 500);

      await fetchProperties(locationInputValue);
      isLoading = false;
    });

    document.getElementById('rent-button').addEventListener('click', () => {
      updateMessage('rent');
    });

    document.getElementById('buy-button').addEventListener('click', () => {
      updateMessage('buy');
    });

    function updateMessage(action) {
      const loadingText = document.getElementById('loading-text');
      const actionButtons = document.getElementById('action-buttons');

      // Hide buttons with a transition
      actionButtons.classList.add('opacity-0');
      setTimeout(() => {
        actionButtons.classList.add('hidden');
      }, 500);

      // Update the message with a transition
      loadingText.classList.add('opacity-0');
      setTimeout(() => {
        loadingText.textContent = `You are looking to ${action} a property in ${locationInputValue}.`;
        loadingText.classList.remove('opacity-0');
      }, 500);
    }
  </script>
</Layout>
